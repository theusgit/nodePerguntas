1. Ejs e criação do projeto
- git init
-criar arquivo index.js
-install express e ejs

2. Configurar ejs
-importar express em const express
-criar instancia app = express()
-criar rota com res.send
-criar listen e a porta, console com mensagem
-install nodemon
-chamar view engine(app.set('view engine','ejs');)
-criar pasta views
-index.ejs
-res.render(index)

3.Exibindo var(Não precisa)
-criar var nome dentro da rota antes de render
-dentro de render,{nome:nome}
-em index.ejs <%= nome %>
(para pegar parametros 
-na rota "/:nome/:lang"
var nome = req.params.nome)

4.Arquivos estáticos
-app.use(express.static('public'));
-criar pasta public
-criar pasta css, arquivo style.css
-link rel stylesheet na index.ejs
(não precisa colocar public mas precisa da "/css/style.css")
-criar pasta img dentro de public
-no index.ejs tag img com caminho da imagem começando com /img/node.png

5.Instalar bootstrap
-baixar ou encontrar arquivo .zip do bootstrap
-descompactar dentro da pasta public
-link rel /css/bootstrap.min.css
-copiar as duas tags scripts e colar no index.ejs depois do body
-importar script js /js/bootstrap.min.js"

6.Criando formulário de perguntas
-criar rota de perguntas com app.get
-"/perguntar"
-renderizar arquivo perguntar.ejs que ficará dentro de views
-copiar tudo de index.ejs para perguntar.ejs
-criar div container
-Adicionar:
h3
hr
form
label titulo
input com class form-control
br
label
textarea form-control
br
button

7.Usar card
-abrir div card
-dentro de card, card-header, card-body
-levar h3 para card-header
-form para card-body

8.CSS com bootstrap
-escolher cor no style.css
-mudar ordem do link rel
-primeiro boo e depois css

9.Finalizando front com navbar
-Antes de container
-nav com class navbar navbar-light bg-primary
-a com class navbar-brand href"/"
-img /img...
-adicionar um id em card para editar com css colocando uma margin de 5vh


10.Partials
criar uma pasta partials dentro de views
criar arquivos header, navbar e footer
header recebe ate /head, navbar recebe nav e footer recebe os scripts ate html
<%- include('partials/header.ejs' %>)
navbar
footer

11.Enviando formulários com Node
-form method="GET" não é seguro
-POST os dados não são passados na url assim é mais seguro
-Precisa criar rota app.post
-action="/salvarpergunta" significa para onde o form vai apontar
-Pegar dados que o form envia titulo e descrição

12.Continuação do envio do form
-instalar body-parser para pegar os dados
-importar bodyParser
-linkar bodyParser, para o body traduzir os dados enviados pelo form para js
-app.use(bodyParser.ulrencoded({extended: false}));
app.use(bodyParser.json());
-ver os nomes dos campos de form
-Colocar nome no input name=titulo
-textearea name=descricao
-utilizar nomes no back end
-na rota, se quiser pegar o titulo
-criar variavel var titulo=req.body.titulo fazer o mesmo na descricao


13.Instalar Sequelize
-Para trabalhar com banco de dados, manipular bancos
-Manipular com javascript
-instalar sequelize
-npm install --save mysql2 para usar sequelize

14.Como conectar sequelize com mysql
-instanciar Sequelize
-criar objeto de conexão const connection=new Sequelize(''nome do banco, root e senha abrir json{
-host que é ''localhost
-e dialect que ''é mysql
})
-exportar connection
-ir no index.js e instanciar connection pegando ./database/database
-usar o connection.authenticate()
-.then() se a conexão ocorreu com sucesso
-se o .then for com sucesso imprimir no console uma frase não esquecer do {} pq é uma função
-se não for usar o catch com msg de erro imprimindo a mensagem de erro
-criar new schema lá no banco

15.Gerando tabela com model
-criar arquivo Pergunta.js na pasta database
-instanciar Sequelize e connection que estão na pasta database
-const Pergunta = connection.define('nome da tabela,json{})
-dentro do json colocar titulo:{type:Sequelize.STRING, allowNull:false},
-fazer o mesmo com descricao
-sincronizar com banco de dados
Pergunta.sync({ force: false }).then(() => {});
-exportar module Pergunta
-importar no index o module Pergunta

16.Salvar perguntas
-ir na rota salvarpergunta
-Se quero salvar um dado dentro de uma tabela eu tenho que pegar o model e atraves do model chamar create
-Pergunta.crate({}) é com o insert
-dentro de crate crar titulo: titulo
descricao: descricao
-.then(()=>{
	res,redirect("/")
})
-se tudo der certo o .then com o res.redirect redireciona o user
































(ctrl+c+k comenta linhas)
(cls limpa a tela)


















